import { mult8x8, transp8x8 } from './dct.naive-matrix.encode'
const { cos, PI, SQRT2 } = Math

const M = [
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  SQRT2 * cos((1 * PI) / 16),
  SQRT2 * cos((3 * PI) / 16),
  SQRT2 * cos((5 * PI) / 16),
  SQRT2 * cos((7 * PI) / 16),
  SQRT2 * cos((9 * PI) / 16),
  SQRT2 * cos((11 * PI) / 16),
  SQRT2 * cos((13 * PI) / 16),
  SQRT2 * cos((15 * PI) / 16),
  SQRT2 * cos((2 * PI) / 16),
  SQRT2 * cos((6 * PI) / 16),
  SQRT2 * cos((10 * PI) / 16),
  SQRT2 * cos((14 * PI) / 16),
  SQRT2 * cos((18 * PI) / 16),
  SQRT2 * cos((22 * PI) / 16),
  SQRT2 * cos((26 * PI) / 16),
  SQRT2 * cos((30 * PI) / 16),
  SQRT2 * cos((3 * PI) / 16),
  SQRT2 * cos((9 * PI) / 16),
  SQRT2 * cos((15 * PI) / 16),
  SQRT2 * cos((21 * PI) / 16),
  SQRT2 * cos((27 * PI) / 16),
  SQRT2 * cos((1 * PI) / 16),
  SQRT2 * cos((7 * PI) / 16),
  SQRT2 * cos((13 * PI) / 16),
  SQRT2 * cos((4 * PI) / 16),
  SQRT2 * cos((12 * PI) / 16),
  SQRT2 * cos((20 * PI) / 16),
  SQRT2 * cos((28 * PI) / 16),
  SQRT2 * cos((4 * PI) / 16),
  SQRT2 * cos((12 * PI) / 16),
  SQRT2 * cos((20 * PI) / 16),
  SQRT2 * cos((28 * PI) / 16),
  SQRT2 * cos((5 * PI) / 16),
  SQRT2 * cos((15 * PI) / 16),
  SQRT2 * cos((25 * PI) / 16),
  SQRT2 * cos((3 * PI) / 16),
  SQRT2 * cos((13 * PI) / 16),
  SQRT2 * cos((23 * PI) / 16),
  SQRT2 * cos((1 * PI) / 16),
  SQRT2 * cos((11 * PI) / 16),
  SQRT2 * cos((6 * PI) / 16),
  SQRT2 * cos((18 * PI) / 16),
  SQRT2 * cos((30 * PI) / 16),
  SQRT2 * cos((10 * PI) / 16),
  SQRT2 * cos((22 * PI) / 16),
  SQRT2 * cos((2 * PI) / 16),
  SQRT2 * cos((14 * PI) / 16),
  SQRT2 * cos((26 * PI) / 16),
  SQRT2 * cos((7 * PI) / 16),
  SQRT2 * cos((21 * PI) / 16),
  SQRT2 * cos((3 * PI) / 16),
  SQRT2 * cos((17 * PI) / 16),
  SQRT2 * cos((31 * PI) / 16),
  SQRT2 * cos((13 * PI) / 16),
  SQRT2 * cos((27 * PI) / 16),
  SQRT2 * cos((9 * PI) / 16),
]

/**
 * TODO: optimize
 */
export const idct = (T: number[]) =>
  mult8x8(transp8x8(M), mult8x8(T, M)).map(x => x / 8)
