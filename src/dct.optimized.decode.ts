import { mult8x8, transp8x8 } from './dct.naive-matrix.encode'
const { cos, PI, SQRT2 } = Math

const M = [
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  SQRT2 * cos((1 / 16) * PI),
  SQRT2 * cos((3 / 16) * PI),
  SQRT2 * cos((5 / 16) * PI),
  SQRT2 * cos((7 / 16) * PI),
  -SQRT2 * cos((7 / 16) * PI),
  -SQRT2 * cos((5 / 16) * PI),
  -SQRT2 * cos((3 / 16) * PI),
  -SQRT2 * cos((1 / 16) * PI),
  SQRT2 * cos((2 / 16) * PI),
  SQRT2 * cos((6 / 16) * PI),
  -SQRT2 * cos((6 / 16) * PI),
  -SQRT2 * cos((2 / 16) * PI),
  -SQRT2 * cos((2 / 16) * PI),
  -SQRT2 * cos((6 / 16) * PI),
  SQRT2 * cos((6 / 16) * PI),
  SQRT2 * cos((2 / 16) * PI),
  SQRT2 * cos((3 / 16) * PI),
  -SQRT2 * cos((7 / 16) * PI),
  -SQRT2 * cos((1 / 16) * PI),
  -SQRT2 * cos((5 / 16) * PI),
  SQRT2 * cos((5 / 16) * PI),
  SQRT2 * cos((1 / 16) * PI),
  SQRT2 * cos((7 / 16) * PI),
  -SQRT2 * cos((3 / 16) * PI),
  SQRT2 * cos((4 / 16) * PI),
  -SQRT2 * cos((4 / 16) * PI),
  -SQRT2 * cos((4 / 16) * PI),
  SQRT2 * cos((4 / 16) * PI),
  SQRT2 * cos((4 / 16) * PI),
  -SQRT2 * cos((4 / 16) * PI),
  -SQRT2 * cos((4 / 16) * PI),
  SQRT2 * cos((4 / 16) * PI),
  SQRT2 * cos((5 / 16) * PI),
  -SQRT2 * cos((1 / 16) * PI),
  SQRT2 * cos((7 / 16) * PI),
  SQRT2 * cos((3 / 16) * PI),
  -SQRT2 * cos((3 / 16) * PI),
  -SQRT2 * cos((7 / 16) * PI),
  SQRT2 * cos((1 / 16) * PI),
  -SQRT2 * cos((5 / 16) * PI),
  SQRT2 * cos((6 / 16) * PI),
  -SQRT2 * cos((2 / 16) * PI),
  SQRT2 * cos((2 / 16) * PI),
  -SQRT2 * cos((6 / 16) * PI),
  -SQRT2 * cos((6 / 16) * PI),
  SQRT2 * cos((2 / 16) * PI),
  -SQRT2 * cos((2 / 16) * PI),
  SQRT2 * cos((6 / 16) * PI),
  SQRT2 * cos((7 / 16) * PI),
  -SQRT2 * cos((5 / 16) * PI),
  SQRT2 * cos((3 / 16) * PI),
  -SQRT2 * cos((1 / 16) * PI),
  SQRT2 * cos((1 / 16) * PI),
  -SQRT2 * cos((3 / 16) * PI),
  SQRT2 * cos((5 / 16) * PI),
  -SQRT2 * cos((7 / 16) * PI),
]

/**
 * TODO: optimize
 */
export const idct = (T: number[]) =>
  mult8x8(transp8x8(M), mult8x8(T, M)).map(x => x / 8)
