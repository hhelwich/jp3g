import { mult8x8 } from './dct.naive-matrix.encode'

const { cos, PI, SQRT2 } = Math

const m = (x: number) => SQRT2 * cos((x / 16) * PI)

const m1 = m(1)
const m2 = m(2)
const m3 = m(3)
const m5 = m(5)
const m6 = m(6)
const m7 = m(7)

// prettier-ignore
export const M8 = mult8x8(
  [
    1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 1,
  ],
  /*
  // A
  [
    1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0,
    0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1,
  ],
  // B
  [
    1,   1,   0,   0,   0,   0,   0,   0,
    1,  -1,   0,   0,   0,   0,   0,   0,
    0,   0,  m6,  m2,   0,   0,   0,   0,
    0,   0, -m2,  m6,   0,   0,   0,   0,
    0,   0,   0,   0,  m7,   0,   0,  m1,
    0,   0,   0,   0,   0,  m3,  m5,   0,
    0,   0,   0,   0,   0, -m5,  m3,   0,
    0,   0,   0,   0, -m1,   0,   0,  m7,
  ],
  // C
  [
    1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1,-1, 0, 0,
    0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0,-1, 1,
    0, 0, 0, 0, 0, 0, 1, 1,
  ],
  // D
  [
    1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1,-1, 0,
    0, 0, 0, 0, 0, 1, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 1,
  ],
  // E
  [
    1, 0, 0, 0, 0,       0,       0, 0,
    0, 1, 0, 0, 0,       0,       0, 0,
    0, 0, 1, 0, 0,       0,       0, 0,
    0, 0, 0, 1, 0,       0,       0, 0,
    0, 0, 0, 0, 1,       0,       0, 0,
    0, 0, 0, 0, 0, 1/SQRT2,       0, 0,
    0, 0, 0, 0, 0,       0, 1/SQRT2, 0,
    0, 0, 0, 0, 0,       0,       0, 1,
  ],
  // F
  [ 
    1,  0,  0,  1,  0,  0,  0,  0,
    0,  1,  1,  0,  0,  0,  0,  0,
    0,  1, -1,  0,  0,  0,  0,  0,
    1,  0,  0, -1,  0,  0,  0,  0,
    0,  0,  0,  0,  1,  0,  0,  0,
    0,  0,  0,  0,  0,  1,  0,  0,
    0,  0,  0,  0,  0,  0,  1,  0,
    0,  0,  0,  0,  0,  0,  0,  1,
  ],
  // G
  [
    1,  0,  0,  0,  0,  0,  0,  1,
    0,  1,  0,  0,  0,  0,  1,  0,
    0,  0,  1,  0,  0,  1,  0,  0,
    0,  0,  0,  1,  1,  0,  0,  0,
    0,  0,  0,  1, -1,  0,  0,  0,
    0,  0,  1,  0,  0, -1,  0,  0,
    0,  1,  0,  0,  0,  0, -1,  0,
    1,  0,  0,  0,  0,  0,  0, -1,
  ]
  */
)

/**
 * TODO: Calculate B := M/sqrt(8) * A^t
 */
export const multM = (A: number[], B: number[]) => {
  for (let i = 0, j = 0; i < 8; i += 1) {
    const a0 = A[j++]
    const a4 = A[j++]
    const a2 = A[j++]
    const a6 = A[j++]
    const a1 = A[j++]
    const a5 = A[j++]
    const a3 = A[j++]
    const a7 = A[j++]
    B[i] = a0
    B[i + 8] = a4
    B[i + 16] = a2
    B[i + 24] = a6
    B[i + 32] = a1
    B[i + 40] = a5
    B[i + 48] = a3
    B[i + 56] = a7
  }
}

const tmp: number[] = []

/**
 * Floating point optimized DCT.
 */
export const dct = (A: number[]) => {
  multM(A, tmp)
  const C: number[] = []
  multM(tmp, C)
  for (let i = 0; i < 64; i += 1) {
    C[i] /= 8
  }
  return C
}
