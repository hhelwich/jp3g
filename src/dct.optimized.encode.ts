import { mult8x8 } from './dct.naive-matrix.encode'

const { cos, PI, SQRT2 } = Math

const m = (x: number) => SQRT2 * cos((x / 16) * PI)

const m1 = m(1)
const m2 = m(2)
const m3 = m(3)
const m5 = m(5)
const m6 = m(6)
const m7 = m(7)

// prettier-ignore
export const M8 = mult8x8(
  /*
  // A
  [
    1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0,
    0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1,
  ],
  // B
  [
    1,   1,   0,   0,   0,   0,   0,   0,
    1,  -1,   0,   0,   0,   0,   0,   0,
    0,   0,  m6,  m2,   0,   0,   0,   0,
    0,   0, -m2,  m6,   0,   0,   0,   0,
    0,   0,   0,   0,  m7,   0,   0,  m1,
    0,   0,   0,   0,   0,  m3,  m5,   0,
    0,   0,   0,   0,   0, -m5,  m3,   0,
    0,   0,   0,   0, -m1,   0,   0,  m7,
  ],
  // C
  [
    1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1,-1, 0, 0,
    0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0,-1, 1,
    0, 0, 0, 0, 0, 0, 1, 1,
  ],
  // D
  [
    1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1,-1, 0,
    0, 0, 0, 0, 0, 1, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 1,
  ],
  // E
  [
    1, 0, 0, 0, 0,       0,       0, 0,
    0, 1, 0, 0, 0,       0,       0, 0,
    0, 0, 1, 0, 0,       0,       0, 0,
    0, 0, 0, 1, 0,       0,       0, 0,
    0, 0, 0, 0, 1,       0,       0, 0,
    0, 0, 0, 0, 0, 1/SQRT2,       0, 0,
    0, 0, 0, 0, 0,       0, 1/SQRT2, 0,
    0, 0, 0, 0, 0,       0,       0, 1,
  ],
  // F
  [ 
    1,  0,  0,  1,  0,  0,  0,  0,
    0,  1,  1,  0,  0,  0,  0,  0,
    0,  1, -1,  0,  0,  0,  0,  0,
    1,  0,  0, -1,  0,  0,  0,  0,
    0,  0,  0,  0,  1,  0,  0,  0,
    0,  0,  0,  0,  0,  1,  0,  0,
    0,  0,  0,  0,  0,  0,  1,  0,
    0,  0,  0,  0,  0,  0,  0,  1,
  ],
*/
  // G
  [
    1,  0,  0,  0,  0,  0,  0,  1,
    0,  1,  0,  0,  0,  0,  1,  0,
    0,  0,  1,  0,  0,  1,  0,  0,
    0,  0,  0,  1,  1,  0,  0,  0,
    0,  0,  0,  1, -1,  0,  0,  0,
    0,  0,  1,  0,  0, -1,  0,  0,
    0,  1,  0,  0,  0,  0, -1,  0,
    1,  0,  0,  0,  0,  0,  0, -1,
  ]
)

/**
 * TODO: Calculate B := (M/sqrt(8) * A)^t
 */
export const multM = (A: number[], B: number[]) => {
  for (let i = 0; i < 8; i += 1) {
    const f0 = A[0 * 8 + i]
    const f1 = A[1 * 8 + i]
    const f2 = A[2 * 8 + i]
    const f3 = A[3 * 8 + i]
    const f4 = A[4 * 8 + i]
    const f5 = A[5 * 8 + i]
    const f6 = A[6 * 8 + i]
    const f7 = A[7 * 8 + i]
    // Apply matrix G
    const g0 = f0 + f7
    const g1 = f1 + f6
    const g2 = f2 + f5
    const g3 = f3 + f4
    const g4 = f3 - f4
    const g5 = f2 - f5
    const g6 = f1 - f6
    const g7 = f0 - f7
    B[i * 8 + 0] = g0
    B[i * 8 + 1] = g1
    B[i * 8 + 2] = g2
    B[i * 8 + 3] = g3
    B[i * 8 + 4] = g4
    B[i * 8 + 5] = g5
    B[i * 8 + 6] = g6
    B[i * 8 + 7] = g7
  }
}

const tmp: number[] = []

/**
 * Floating point optimized DCT.
 */
export const dct = (A: number[]) => {
  multM(A, tmp)
  const C: number[] = []
  multM(tmp, C)
  for (let i = 0; i < 64; i += 1) {
    C[i] /= 8
  }
  return C
}
